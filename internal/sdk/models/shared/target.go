// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/epilot-dev/terraform-provider-epilot-target/internal/sdk/internal/utils"
	"time"
)

type Schema string

const (
	SchemaTarget Schema = "target"
)

func (e Schema) ToPointer() *Schema {
	return &e
}
func (e *Schema) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "target":
		*e = Schema(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Schema: %v", v)
	}
}

type Target struct {
	// Additional fields that are not part of the schema
	Additional map[string]any `json:"__additional,omitempty"`
	// Access control list (ACL) for an entity. Defines sharing access to external orgs or users.
	ACL       *BaseEntityACL `json:"_acl,omitempty"`
	CreatedAt *time.Time     `json:"_created_at,omitempty"`
	Files     *BaseRelation  `json:"_files,omitempty"`
	ID        *string        `json:"_id,omitempty"`
	// Manifest ID used to create/update the entity
	Manifest []string `json:"_manifest,omitempty"`
	// Organization Id the entity belongs to
	Org       string     `json:"_org"`
	Purpose   []string   `json:"_purpose,omitempty"`
	Schema    Schema     `json:"_schema"`
	Tags      []string   `json:"_tags,omitempty"`
	Title     *string    `json:"_title,omitempty"`
	UpdatedAt *time.Time `json:"_updated_at,omitempty"`
	// The description of the target
	Description *string `json:"description,omitempty"`
	// The filters on the targeted schema
	EntityFilters any `json:"entity_filters,omitempty"`
	// The schema of the target entities
	EntitySchema *string `json:"entity_schema,omitempty"`
	// The description for the target
	Name string `json:"name"`
}

func (t Target) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Target) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"_org", "_schema", "name"}); err != nil {
		return err
	}
	return nil
}

func (t *Target) GetAdditional() map[string]any {
	if t == nil {
		return nil
	}
	return t.Additional
}

func (t *Target) GetACL() *BaseEntityACL {
	if t == nil {
		return nil
	}
	return t.ACL
}

func (t *Target) GetCreatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CreatedAt
}

func (t *Target) GetFiles() *BaseRelation {
	if t == nil {
		return nil
	}
	return t.Files
}

func (t *Target) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *Target) GetManifest() []string {
	if t == nil {
		return nil
	}
	return t.Manifest
}

func (t *Target) GetOrg() string {
	if t == nil {
		return ""
	}
	return t.Org
}

func (t *Target) GetPurpose() []string {
	if t == nil {
		return nil
	}
	return t.Purpose
}

func (t *Target) GetSchema() Schema {
	if t == nil {
		return Schema("")
	}
	return t.Schema
}

func (t *Target) GetTags() []string {
	if t == nil {
		return nil
	}
	return t.Tags
}

func (t *Target) GetTitle() *string {
	if t == nil {
		return nil
	}
	return t.Title
}

func (t *Target) GetUpdatedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.UpdatedAt
}

func (t *Target) GetDescription() *string {
	if t == nil {
		return nil
	}
	return t.Description
}

func (t *Target) GetEntityFilters() any {
	if t == nil {
		return nil
	}
	return t.EntityFilters
}

func (t *Target) GetEntitySchema() *string {
	if t == nil {
		return nil
	}
	return t.EntitySchema
}

func (t *Target) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}
