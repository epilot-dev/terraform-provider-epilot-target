// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type TargetPatchSchema string

const (
	TargetPatchSchemaTarget TargetPatchSchema = "target"
)

func (e TargetPatchSchema) ToPointer() *TargetPatchSchema {
	return &e
}
func (e *TargetPatchSchema) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "target":
		*e = TargetPatchSchema(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetPatchSchema: %v", v)
	}
}

type TargetPatch struct {
	// Additional fields that are not part of the schema
	Additional map[string]any `json:"__additional,omitempty"`
	Files      *BaseRelation  `json:"_files,omitempty"`
	// Manifest ID used to create/update the entity
	Manifest []string           `json:"_manifest,omitempty"`
	Purpose  []string           `json:"_purpose,omitempty"`
	Schema   *TargetPatchSchema `json:"_schema,omitempty"`
	Tags     []string           `json:"_tags,omitempty"`
	// The description of the target
	Description *string `json:"description,omitempty"`
	// The filters on the targeted schema
	EntityFilters any `json:"entity_filters,omitempty"`
	// The schema of the target entities
	EntitySchema *string `json:"entity_schema,omitempty"`
	// The description for the target
	Name *string `json:"name,omitempty"`
}

func (t *TargetPatch) GetAdditional() map[string]any {
	if t == nil {
		return nil
	}
	return t.Additional
}

func (t *TargetPatch) GetFiles() *BaseRelation {
	if t == nil {
		return nil
	}
	return t.Files
}

func (t *TargetPatch) GetManifest() []string {
	if t == nil {
		return nil
	}
	return t.Manifest
}

func (t *TargetPatch) GetPurpose() []string {
	if t == nil {
		return nil
	}
	return t.Purpose
}

func (t *TargetPatch) GetSchema() *TargetPatchSchema {
	if t == nil {
		return nil
	}
	return t.Schema
}

func (t *TargetPatch) GetTags() []string {
	if t == nil {
		return nil
	}
	return t.Tags
}

func (t *TargetPatch) GetDescription() *string {
	if t == nil {
		return nil
	}
	return t.Description
}

func (t *TargetPatch) GetEntityFilters() any {
	if t == nil {
		return nil
	}
	return t.EntityFilters
}

func (t *TargetPatch) GetEntitySchema() *string {
	if t == nil {
		return nil
	}
	return t.EntitySchema
}

func (t *TargetPatch) GetName() *string {
	if t == nil {
		return nil
	}
	return t.Name
}
