// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"github.com/epilot-dev/terraform-provider-epilot-target/internal/provider/typeconvert"
	tfTypes "github.com/epilot-dev/terraform-provider-epilot-target/internal/provider/types"
	"github.com/epilot-dev/terraform-provider-epilot-target/internal/sdk/models/operations"
	"github.com/epilot-dev/terraform-provider-epilot-target/internal/sdk/models/shared"
	"github.com/hashicorp/terraform-plugin-framework-jsontypes/jsontypes"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

func (r *TargetResourceModel) RefreshFromSharedTarget(ctx context.Context, resp *shared.Target) diag.Diagnostics {
	var diags diag.Diagnostics

	if resp != nil {
		if resp.Additional != nil {
			r.Additional = make(map[string]jsontypes.Normalized, len(resp.Additional))
			for key, value := range resp.Additional {
				result, _ := json.Marshal(value)
				r.Additional[key] = jsontypes.NewNormalizedValue(string(result))
			}
		}
		if resp.ACL == nil {
			r.ACL = nil
		} else {
			r.ACL = &tfTypes.BaseEntityACL{}
			r.ACL.Delete = make([]types.String, 0, len(resp.ACL.Delete))
			for _, v := range resp.ACL.Delete {
				r.ACL.Delete = append(r.ACL.Delete, types.StringValue(v))
			}
			r.ACL.Edit = make([]types.String, 0, len(resp.ACL.Edit))
			for _, v := range resp.ACL.Edit {
				r.ACL.Edit = append(r.ACL.Edit, types.StringValue(v))
			}
			r.ACL.View = make([]types.String, 0, len(resp.ACL.View))
			for _, v := range resp.ACL.View {
				r.ACL.View = append(r.ACL.View, types.StringValue(v))
			}
		}
		r.CreatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.CreatedAt))
		if resp.Files == nil {
			r.Files = nil
		} else {
			r.Files = &tfTypes.BaseRelation{}
			r.Files.DollarRelation = []tfTypes.DollarRelation{}

			for _, dollarRelationItem := range resp.Files.DollarRelation {
				var dollarRelation tfTypes.DollarRelation

				if dollarRelationItem.Tags != nil {
					dollarRelation.Tags = make([]types.String, 0, len(dollarRelationItem.Tags))
					for _, v := range dollarRelationItem.Tags {
						dollarRelation.Tags = append(dollarRelation.Tags, types.StringValue(v))
					}
				}
				dollarRelation.EntityID = types.StringPointerValue(dollarRelationItem.EntityID)

				r.Files.DollarRelation = append(r.Files.DollarRelation, dollarRelation)
			}
		}
		r.ID = types.StringPointerValue(resp.ID)
		r.Manifest = make([]types.String, 0, len(resp.Manifest))
		for _, v := range resp.Manifest {
			r.Manifest = append(r.Manifest, types.StringValue(v))
		}
		r.Org = types.StringValue(resp.Org)
		r.Owners = []tfTypes.BaseEntityOwner{}

		for _, ownersItem := range resp.Owners {
			var owners tfTypes.BaseEntityOwner

			owners.OrgID = types.StringValue(ownersItem.OrgID)
			owners.UserID = types.StringPointerValue(ownersItem.UserID)

			r.Owners = append(r.Owners, owners)
		}
		if resp.Purpose != nil {
			r.Purpose = make([]types.String, 0, len(resp.Purpose))
			for _, v := range resp.Purpose {
				r.Purpose = append(r.Purpose, types.StringValue(v))
			}
		}
		r.Schema = types.StringValue(string(resp.Schema))
		if resp.Tags != nil {
			r.Tags = make([]types.String, 0, len(resp.Tags))
			for _, v := range resp.Tags {
				r.Tags = append(r.Tags, types.StringValue(v))
			}
		}
		r.Title = types.StringPointerValue(resp.Title)
		r.UpdatedAt = types.StringPointerValue(typeconvert.TimePointerToStringPointer(resp.UpdatedAt))
		r.Description = types.StringPointerValue(resp.Description)
		if resp.EntityFilters == nil {
			r.EntityFilters = jsontypes.NewNormalizedNull()
		} else {
			entityFiltersResult, _ := json.Marshal(resp.EntityFilters)
			r.EntityFilters = jsontypes.NewNormalizedValue(string(entityFiltersResult))
		}
		r.EntitySchema = types.StringPointerValue(resp.EntitySchema)
		r.Name = types.StringValue(resp.Name)
	}

	return diags
}

func (r *TargetResourceModel) ToOperationsDeleteTargetRequest(ctx context.Context) (*operations.DeleteTargetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var targetID string
	targetID = r.ID.ValueString()

	out := operations.DeleteTargetRequest{
		TargetID: targetID,
	}

	return &out, diags
}

func (r *TargetResourceModel) ToOperationsGetTargetRequest(ctx context.Context) (*operations.GetTargetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	var targetID string
	targetID = r.ID.ValueString()

	out := operations.GetTargetRequest{
		TargetID: targetID,
	}

	return &out, diags
}

func (r *TargetResourceModel) ToOperationsPatchTargetRequest(ctx context.Context) (*operations.PatchTargetRequest, diag.Diagnostics) {
	var diags diag.Diagnostics

	targetPatch, targetPatchDiags := r.ToSharedTargetPatch(ctx)
	diags.Append(targetPatchDiags...)

	if diags.HasError() {
		return nil, diags
	}

	var targetID string
	targetID = r.ID.ValueString()

	out := operations.PatchTargetRequest{
		TargetPatch: *targetPatch,
		TargetID:    targetID,
	}

	return &out, diags
}

func (r *TargetResourceModel) ToSharedTargetCreate(ctx context.Context) (*shared.TargetCreate, diag.Diagnostics) {
	var diags diag.Diagnostics

	additional := make(map[string]interface{})
	for additionalKey, additionalValue := range r.Additional {
		var additionalInst interface{}
		_ = json.Unmarshal([]byte(additionalValue.ValueString()), &additionalInst)
		additional[additionalKey] = additionalInst
	}
	var files *shared.BaseRelation
	if r.Files != nil {
		dollarRelation := make([]shared.DollarRelation, 0, len(r.Files.DollarRelation))
		for _, dollarRelationItem := range r.Files.DollarRelation {
			var tags []string
			if dollarRelationItem.Tags != nil {
				tags = make([]string, 0, len(dollarRelationItem.Tags))
				for _, tagsItem := range dollarRelationItem.Tags {
					tags = append(tags, tagsItem.ValueString())
				}
			}
			entityID := new(string)
			if !dollarRelationItem.EntityID.IsUnknown() && !dollarRelationItem.EntityID.IsNull() {
				*entityID = dollarRelationItem.EntityID.ValueString()
			} else {
				entityID = nil
			}
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				Tags:     tags,
				EntityID: entityID,
			})
		}
		files = &shared.BaseRelation{
			DollarRelation: dollarRelation,
		}
	}
	manifest := make([]string, 0, len(r.Manifest))
	for _, manifestItem := range r.Manifest {
		manifest = append(manifest, manifestItem.ValueString())
	}
	var purpose []string
	if r.Purpose != nil {
		purpose = make([]string, 0, len(r.Purpose))
		for _, purposeItem := range r.Purpose {
			purpose = append(purpose, purposeItem.ValueString())
		}
	}
	schema := new(shared.TargetCreateSchema)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = shared.TargetCreateSchema(r.Schema.ValueString())
	} else {
		schema = nil
	}
	var tags1 []string
	if r.Tags != nil {
		tags1 = make([]string, 0, len(r.Tags))
		for _, tagsItem1 := range r.Tags {
			tags1 = append(tags1, tagsItem1.ValueString())
		}
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var entityFilters interface{}
	if !r.EntityFilters.IsUnknown() && !r.EntityFilters.IsNull() {
		_ = json.Unmarshal([]byte(r.EntityFilters.ValueString()), &entityFilters)
	}
	entitySchema := new(string)
	if !r.EntitySchema.IsUnknown() && !r.EntitySchema.IsNull() {
		*entitySchema = r.EntitySchema.ValueString()
	} else {
		entitySchema = nil
	}
	var name string
	name = r.Name.ValueString()

	out := shared.TargetCreate{
		Additional:    additional,
		Files:         files,
		Manifest:      manifest,
		Purpose:       purpose,
		Schema:        schema,
		Tags:          tags1,
		Description:   description,
		EntityFilters: entityFilters,
		EntitySchema:  entitySchema,
		Name:          name,
	}

	return &out, diags
}

func (r *TargetResourceModel) ToSharedTargetPatch(ctx context.Context) (*shared.TargetPatch, diag.Diagnostics) {
	var diags diag.Diagnostics

	additional := make(map[string]interface{})
	for additionalKey, additionalValue := range r.Additional {
		var additionalInst interface{}
		_ = json.Unmarshal([]byte(additionalValue.ValueString()), &additionalInst)
		additional[additionalKey] = additionalInst
	}
	var files *shared.BaseRelation
	if r.Files != nil {
		dollarRelation := make([]shared.DollarRelation, 0, len(r.Files.DollarRelation))
		for _, dollarRelationItem := range r.Files.DollarRelation {
			var tags []string
			if dollarRelationItem.Tags != nil {
				tags = make([]string, 0, len(dollarRelationItem.Tags))
				for _, tagsItem := range dollarRelationItem.Tags {
					tags = append(tags, tagsItem.ValueString())
				}
			}
			entityID := new(string)
			if !dollarRelationItem.EntityID.IsUnknown() && !dollarRelationItem.EntityID.IsNull() {
				*entityID = dollarRelationItem.EntityID.ValueString()
			} else {
				entityID = nil
			}
			dollarRelation = append(dollarRelation, shared.DollarRelation{
				Tags:     tags,
				EntityID: entityID,
			})
		}
		files = &shared.BaseRelation{
			DollarRelation: dollarRelation,
		}
	}
	manifest := make([]string, 0, len(r.Manifest))
	for _, manifestItem := range r.Manifest {
		manifest = append(manifest, manifestItem.ValueString())
	}
	var purpose []string
	if r.Purpose != nil {
		purpose = make([]string, 0, len(r.Purpose))
		for _, purposeItem := range r.Purpose {
			purpose = append(purpose, purposeItem.ValueString())
		}
	}
	schema := new(shared.TargetPatchSchema)
	if !r.Schema.IsUnknown() && !r.Schema.IsNull() {
		*schema = shared.TargetPatchSchema(r.Schema.ValueString())
	} else {
		schema = nil
	}
	var tags1 []string
	if r.Tags != nil {
		tags1 = make([]string, 0, len(r.Tags))
		for _, tagsItem1 := range r.Tags {
			tags1 = append(tags1, tagsItem1.ValueString())
		}
	}
	description := new(string)
	if !r.Description.IsUnknown() && !r.Description.IsNull() {
		*description = r.Description.ValueString()
	} else {
		description = nil
	}
	var entityFilters interface{}
	if !r.EntityFilters.IsUnknown() && !r.EntityFilters.IsNull() {
		_ = json.Unmarshal([]byte(r.EntityFilters.ValueString()), &entityFilters)
	}
	entitySchema := new(string)
	if !r.EntitySchema.IsUnknown() && !r.EntitySchema.IsNull() {
		*entitySchema = r.EntitySchema.ValueString()
	} else {
		entitySchema = nil
	}
	name := new(string)
	if !r.Name.IsUnknown() && !r.Name.IsNull() {
		*name = r.Name.ValueString()
	} else {
		name = nil
	}
	out := shared.TargetPatch{
		Additional:    additional,
		Files:         files,
		Manifest:      manifest,
		Purpose:       purpose,
		Schema:        schema,
		Tags:          tags1,
		Description:   description,
		EntityFilters: entityFilters,
		EntitySchema:  entitySchema,
		Name:          name,
	}

	return &out, diags
}
